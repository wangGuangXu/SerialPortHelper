<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAGEPAABhDwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABQAAAAcAAAAIAAAACAAAAAgAAAAIAAAACAAA
        AAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAABwAAAAQAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEAx0JCAhiBwYGiAMDA40HBgaMCQkIjAkJ
        CIwJCQiMCQkIjAkJCIwJCQiMCQkIjAkJCIwJCQiMCQkIjAkJCI0JCQiDCAgHUwIBARIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOFRQTkGRcV+ViW1b0NDIw9Wdj
        X/WKhYD1i4WA9YuFgPWLhYD1i4WA9YuFgPWLhYD1i4WA9YuFgPWLhYD1jIaB9YF8d/NST0zaCAcHcAAA
        AAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC0lIyDOjYN7/ZyR
        if5MR0T/pJ2X/9TLxP+9tbD/tK2p/7Wuqv+1rqr/ta6q/7Wuqv+1rqr/ta6q/7Wuqf+8tK//z8fA/6Oc
        l/geHBuoAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHAwL
        CokqJyWqKyclsSEgHuORi4f9fHVq/2JXLv9xYij/cmMp/3JjKf9yYyn/cmMp/3JjKf9yYyn/cWIn/2JX
        K/92cGT/nJaR+iknJq8AAAARAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXAAAAMAAA
        ADMAAAA3AAAARwAAAEwAAABaGhkXxHx3dftgWED/nYMR/965Fv/duRf/3bgX/924Fv/duRj/3bkc/926
        Hv/eux3/oYcW/15XPv+Hg4H7KCYlwAAAAEIAAAAyAAAAMwAAADMAAAAwAAAAGQAAAAAAAAACBAMCMBwW
        EKcwJRvPGhQP0iQeGNI2LCTROS4n0DEoINQlIh7weHRy/mBYPf+vkhL/+9Ea//rRGf/50Bz/+tMt//rW
        Qv/62E7/+9lR//zZUf+1nTr/YFhD/4R/ff4uKifxMCcg1jEpIdIWEg7SIBkS0jEmHNAcFhCrAwICOAAA
        AAYHBgR0YUs37KqDYP9fSTb/aVZF/15OP/9VRzj/Sz8x/zAqJf95dHP/YFg+/6+REv/50Bn/+NAd//jT
        N//52FX/+dlh//naZP/62mX/+9tl/7WeSP9gWUb/hYB9/zcxLP9QQjT/alhI/0w+Mf9xV0D/roZi/3FX
        QO4OCgh8AAAACAgGBYx5XkX11aR5/3ddRf9xXEv/QkIg/2KBEf9khhL/OEMa/3p1c/9gWD7/r5ES//rQ
        Gf/50jD/+ddV//naZf/52mb/+dpl//raZf/722b/tZ5J/2BZRv+Ggnz/PEUg/0laFP9QRDX/XEs8/49t
        UP/cqXz/lXNV9RMPC40AAAAICAYFjXxfRvXZpnv/eF1F/2tWSP89RhT/gbsE/4rKCf9FWhj/eXZy/2BX
        Pv+zlRH//9ch///bR///32X//+Bo///gaP//4Gj//+Bo///haP+5okv/YFhG/4eDfP9GWRz/VnoH/0I5
        Kv9bSjv/jm1Q/9upfP+YdVb1FBALjQAAAAgHBQSNa1M99aeAXv9uVT//a1ZI/0FKFv+LyQf/ldgM/0hf
        GP+Bfnn/XFZC/35qCf+zlhb/tJs2/7OdR/+znUb/s51G/7OdRv+0nUb/tJ1F/4JxMv9YUkX/jYmB/0ld
        HP9egwj/RDsr/1tJO/+ObVD/26l8/5d1VvUUEAuNAgEBCAcFBI1NPCz1W0Yz/15JNv9rVkj/QEoW/4nH
        Bv+T1gz/RVsW/5iTi/+dlYz/hn1g/46DX/+OhGf/j4Vs/5GHbf+Rh23/kYdt/5GHbf+Qhmz/h39r/5qT
        jP+loJX/R1oa/12BCP9EOyv/W0k7/49uUf/frH7/mXZW9RQQC40DAgIIBwUEjUEyJfU/MCT/WEQz/2tW
        SP9AShb/iccG/5TWDP9EWhX/o52V/+Xb1P+9trH/pZ6b/7Stqf+ooZ7/lI6L/5WPjP+Vj4z/lY+L/5SP
        i/+spaH/3NPN/7Ouov9FWBj/XYII/0Q7K/9aSTv/g2VK/72Ra/+ScFL1FBAMjQIBAQgHBQSNSzor9VVB
        MP9dSDb/a1dI/0BKFv+Jxwb/lNYM/0RaFf+jnZX/+e7n/8O7tP+Zk43/urKr/6CalP90cGv/dnJt/3Zy
        bf92cW3/d3Ft/5+Zk//n3db/ta+k/0VYGP9dggj/RTsr/1hHOf9dSDX/X0k1/3ldRPUVEQyNAAAACAYF
        BI1cRzT1eFxE/2ROOv9rVkj/QEoW/4nHBv+U1gz/RFoV/6Oelf/p4Nn/wLm1/6Wfnf+2r6z/qqOh/5SP
        jv+WkI//lpCP/5WQj/+Vj4//rqek/+HX0f+1r6P/RVgY/12CCP9EOyv/WUg6/2lRO/98YEb/gWNJ9RUQ
        DI0CAQEIBwUEjVI/LvVhSzj/X0o3/2tWSP9AShb/iccG/5PVC/9CWBT/l5KL/56Xjv+FfGL/i4Bd/4uA
        Xf+LgV7/jYJf/42CXv+Ngl7/jYJf/4yBXv+FfWL/nJWM/6ahl/9GWhn/XYEI/0Q7K/9bSjv/i2tO/9Gh
        dv+XdFX1FRAMjQIBAQgHBgSNWEQx9XNZQf9jTTn/a1ZI/0BKFv+Jxgb/ltoL/2R+K/+Wkoj/Y1tJ/3tn
        Dv+sjw//rI8Q/6uPEP+rjxH/q48S/6uPEv+sjxL/rI8S/35qD/9dVkP/kIyE/0hcHP9dgQj/RDsr/1tJ
        O/+PblH/3ap9/5h1VvUUEAuNAAAACAgGBI11WkL1wZVt/3RZQv9rVkj/QUsW/4vKB/+e5gv/kbBH/6al
        lf9kWkH/sZMR///UGf/+1B7//dYs//7YOf/+2D3//tg8//7ZPf//2j3/t5wr/19WP/+HhH3/Sl4c/1+E
        CP9EOyv/W0k7/45tUP/bqXz/l3VW9RQQC40AAAAICAYFjXxfRvXZpnr/eF1F/2tWSP84QBT/cqcD/3+8
        B/9qgzL/lJKH/2JaQP+xkxH//9Qc//7XM//921P//t1i//7eZP/+3mT//t5k///fZP+4oEj/X1hG/4eD
        fP9BUxz/TW0G/0I4Kv9bSjv/j25R/9ypfP+Zdlf1FRALjQAAAAcIBgSKdltD9tKid/92XET/c15N/0Q/
        Jv9NXRb/TF4U/y0yGf99eXb/XldB/4lyDf/Doxj/w6c3/8OqTv/DqlD/w6pP/8OrT//ErFD/xKxP/418
        Of9bVUb/iYWA/zQ5If8/Rhn/WEk6/1xLPP+NbE//2KZ7/5BuUfYSDgqNAAAABQcFBGJRPi3gknBS+FJA
        L/leTT75VUU5+Ug6M/k+MSz6KCMg/ZKMh/+Jgnj/c2hH/35yR/9/dVL/f3VX/391V/9/dVf/fnRW/350
        Vv+Adlf/dGxV/4aAeP+el5L/MSso/UU3L/lhUEH5Qzcs+GNMOPiWc1X4WkUz5goIBnAAAAABAgIBHQ8L
        CXwkHBSgFREMox4ZFKIwKCCgNCsjniskHaUeGxnfopuV/eDX0P/Sysb/y8TB/8zFwP/MxcD/zMXA/83F
        wf+uqKT/ioWE/6OdnP/Kw7//29PN/6qkn/0lIiLjJyAaqycgHKEPDAumGBIOpiYdFaAOCwiFAQEBKQAA
        AAAEAwMAAAAABgAAAA8AAAAQAAAAFQAAAC4AAAA1AAAARRQTEryhm5X79ezj//706//98+n//fPp//3z
        6f/98+r//vTr/66mnv9MRzv/dGxb/7Comv+xqZr/gHlt/CQhFc8yKgJkYlIFSCYgAWMUEQBfAAAAOQAA
        AAsDAwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfEhEQkj87N7JCPTq4JiQi5qSel/327OP//PLp//rw
        5//78Of/+/Dn//zx6P/68Oj/p5+U/1pOHP96Zgv/fGkZ/35sG/94Zhb/dGEO+JJ6Ed28nhnKfGkV6F9Q
        E+MkHwulBAMBJQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACsmIyHOjoR8/52Sif9KRkL/nZeR/+Pa
        0v/n3tb/5t3V/+bd1f/m3dX/597W/+Xc1v+ak4r/g3Ah/+bAFP/uxxj/7sYY//HKHP/txyP/8cww//PQ
        Ov/sy0D/2LpD/2ZZJu4HBgNaAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADRYWFIdiW1bbYltW6zAu
        LOxgXFnsgn157IJ9eOyCfXjsgn147IJ9eOyDfXnsgXx47FhTTPN4Zhf9zaoU/6mNEv+2mBn/y6wp/6SN
        L//Dqkn/wqpO/6aRRP/XvVj/jn067QkIA2MAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGgAA
        AFsAAAB5AAAAfAAAAHsAAAB7AAAAewAAAHsAAAB7AAAAewAAAHsAAAB7CwkAqm5cDPGdgxL/NSsK/09E
        HP94aC3/LygR/2pcK/9pWyn/NSwR/6eRRP+OfDrtCQgEYgAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAABAQEAAQEBAAEBAQABAQEAAQEBAAEBAQABAQEAAQEBAAAAAAAUEQFadmMS476h
        Kf+DcjD/lII9/7GcSP94Zy//ppFD/6OPQv95aTD/xa1Q/4x6OO0JBwNiAAAABAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwK
        AFRoWh/d17tN//DSYf/u0GD/8NJh/+zOYP/v0mH/79Fh/+zPYP/gxVv/eWox6ggHA10AAAADAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAQAAMDEqE6puYC3yk4E89ZKAO/WSgDv1koA79ZKAO/WSgDv1kH469XxsMvAwKhTABQQCMQAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAEBgUDMAgHA3QKCQSOCgkEjAoJBIwKCQSMCgkEjAoJBI0KCQSMCQgEewYF
        AjgDAgEDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAAgBAQAIAQEACAEBAAgBAQAIAQEACAEB
        AAgAAAAHAAAAAwAAAAAAAAAA/AAAf/gAAD/wAAA/8AAAP8AAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAH4AAAA8AAAAPAA
        AAD8AAAA/AAAAP//wAD//8AA///AAP//wAE=
</value>
  </data>
</root>